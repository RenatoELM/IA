#include <iostream>
using namespace std;

float sumatoria(float x[][4], float pesos[], float *peso_x0, int pos_entrada){
  int sum = 0;
  for(int i = 0; i < 4; i++){
    sum = sum + x[pos_entrada][i] * pesos[i];
  }
  sum = sum + *peso_x0;
  return sum;
}

float f_activacion(float num_sum){
  float x;
  if(num_sum > 0){
    x = 1;
  }
  else if(num_sum <= 0){
    x = 0;
  }
  return x;
}

bool error(float y, float d_ent_positiva){
  float e;
  e = y - d_ent_positiva;
  if(e == 0){
    return 0;
  }
  else{
    return 1;
  }
}

void modificar_pesos(float pesos[], float d_ent_positiva[16], float y, float x[][4], float *peso_x0, int pos_entrada){
  for(int i = 0; i < 4; i++){
    pesos[i] = pesos[i] + 0.5 * x[pos_entrada][i] * (d_ent_positiva[pos_entrada] - y);
    //cout << "W" << i+1 << ": " << pesos[i] << endl;
  }
  *peso_x0 = *peso_x0 + 0.5 * 1 * (d_ent_positiva[pos_entrada] - y);
  //cout << "W0: " << *peso_x0 <<endl;
}

void perceptron(float x[][4], float w[], float *peso_x0, int pos_entrada, float ent_posit[16], int *p_cond){
  int sum;
  int num_f_a;
  bool e;
  //for(int i = 0; i < 16; i++){
    sum = sumatoria(x, w, peso_x0, pos_entrada);
    num_f_a = f_activacion(sum);
    e = error(num_f_a, ent_posit[pos_entrada]);
    if(e == true){
      modificar_pesos(w, ent_posit, num_f_a, x, peso_x0, pos_entrada);
      *p_cond = *p_cond + 1;
    }
  //}
}

void entrenamiento(float x[][4], float w[], float *peso_x0, float ent_posit[16]){
  int cond = 1, *p_cond;  //para confirmar que ya no haya errores en el perceptron
  p_cond = &cond;
  int i = 0;
  int epoca = 0;
  int temp = 0;
  //if(*p_cond > 0){
  while(temp < 1){
  //while(*p_cond != 0){
    *p_cond = 0;
    for(int i = 0; i < 16; i++){
      perceptron(x, w, peso_x0, i, ent_posit, p_cond);
      cout << *p_cond << endl;
    }
    /*for(int i = 0; i < 4; i++){
      cout << w[i] << endl;
    }*/
    epoca++;
    temp++;
  }
  cout << "------------------" << endl;
  cout << "Peso de w0: " << *peso_x0 << endl;
  for(int j = 0; j < 4; j++){
    cout << "Peso de w" << j+1 << ": " << w[j] << endl;
  }
  cout << "Epocas = " << epoca << endl;
}

void mostrar_result(float m[][4], float w[], float *peso_x0){
  int sum = 0;
  for(int i = 0; i < 5; i++){
    for(int j = 0; j < 4; j++){
      sum = sum + m[i][j] * w[i];
    }
    sum = sum + *peso_x0;
    if(sum > 0){
      cout << "Numero reconodido" << endl;
    }
    else{
      cout << "Numero irreconocible" << endl;
      i = 5;
    }
  }
}

int main(){
  float ent_positivas[16]={0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1};
  float peso_x0 = 0, *p_peso_x0;
  p_peso_x0 = &peso_x0;
  float pesos[4]={0,0,0,0};
  float m[16][4]={{0,0,0,0},
                  {0,0,0,1},  //2,3
                  {0,0,1,0},  //1
                  {0,0,1,1},
                  {0,1,0,0},
                  {0,1,0,1},
                  {0,1,1,0},  //0,1
                  {0,1,1,1},  //3
                  {1,0,0,0},  //2
                  {1,0,0,1},  //0
                  {1,0,1,0},
                  {1,0,1,1},
                  {1,1,0,0},
                  {1,1,0,1},
                  {1,1,1,0},
                  {1,1,1,1}}; //2,3

  float matriz_0[5][4]={{0,1,1,0},
                        {1,0,0,1},
                        {1,0,0,1},
                        {1,0,0,1},
                        {0,1,1,0}};

  float matriz_1[5][4]={{0,0,1,0},
                        {0,1,1,0},
                        {0,0,1,0},
                        {0,0,1,0},
                        {0,0,1,0}};

  float matriz_2[5][4]={{1,1,1,1},
                        {0,0,0,1},
                        {1,1,1,1},
                        {1,0,0,0},
                        {1,1,1,1}};

  float matriz_3[5][4]={{1,1,1,1},
                        {0,0,0,1},
                        {0,1,1,1},
                        {0,0,0,1},
                        {1,1,1,1}};

  for(int i = 0; i < 16; i++){
    for(int j = 0; j < 4; j++){
      cout << m[i][j] << " ";
    }
    cout << endl;
  }
  cout << "------------------" << endl;
  entrenamiento(m, pesos, p_peso_x0, ent_positivas);
  cout << "------------------" << endl;
  cout << peso_x0 << endl;
  for(int i = 0; i < 4; i++){
    cout << pesos[i] << endl;
  }
  mostrar_result(matriz_0, pesos, p_peso_x0);
  return 0;
}