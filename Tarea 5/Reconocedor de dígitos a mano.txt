(Cada espacio dividido por guiones es una celda de c√≥digo nueva)

!wget --no-check-certificate \
    http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz \
    -O /tmp/train-images-idx3-ubyte.gz

-------------

!wget --no-check-certificate \
    http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz \
    -O /tmp/train-labels-idx1-ubyte.gz

-------------

!wget --no-check-certificate \
    http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz \
    -O /tmp/t10k-images-idx3-ubyte.gz

-------------

!wget --no-check-certificate \
    http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz \
    -O /tmp/t10k-labels-idx1-ubyte.gz

-------------

import os
import gzip

f = gzip.open('/tmp/train-images-idx3-ubyte.gz', 'rb')
file_content = f.read()
f.close()

f = gzip.open('/tmp/train-labels-idx1-ubyte.gz', 'rb')
file_content = f.read()
f.close()

f = gzip.open('/tmp/t10k-images-idx3-ubyte.gz', 'rb')
file_content = f.read()
f.close()

f = gzip.open('/tmp/t10k-labels-idx1-ubyte.gz', 'rb')
file_content = f.read()
f.close()

-------------

base_dir_1 = '/tmp/train-images-idx3-ubyte.gz'
train_dir_1 = os.path.join(base_dir_1, 'train')
validation_dir_1 = os.path.join(base_dir_1, 'validation')

base_dir_2 = '/tmp/train-labels-idx1-ubyte.gz'
train_dir_2 = os.path.join(base_dir_2, 'train')
validation_dir_2 = os.path.join(base_dir_2, 'validation')

base_dir_3 = '/tmp/t10k-images-idx3-ubyte.gz'
train_dir_3 = os.path.join(base_dir_3, 'train')
validation_dir_3 = os.path.join(base_dir_3, 'validation')

base_dir_4 = '/tmp/t10k-labels-idx1-ubyte.gz'
train_dir_4 = os.path.join(base_dir_4, 'train')
validation_dir_3 = os.path.join(base_dir_4, 'validation')

train_digitos_dir = os.path.join(train_dir_1, 'numbers')

validation_digitos_dir = os.path.join(validation_dir_1, 'numbers')

-------------

%matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

nrows = 4
ncols = 4

pic_index = 0

-------------

from tensorflow.keras import layers
from tensorflow.keras import Model

-------------

img_input = layers.Input(shape=(150, 150, 3))

x = layers.Conv2D(16, 3, activation='relu')(img_input)
x = layers.MaxPooling2D(2)(x)

x = layers.Conv2D(32, 3, activation='relu')(x)
x = layers.MaxPooling2D(2)(x)

x = layers.Conv2D(64, 3, activation='relu')(x)
x = layers.MaxPooling2D(2)(x)

-------------

x = layers.Flatten()(x)

x = layers.Dense(512, activation='relu')(x)

output = layers.Dense(1, activation='sigmoid')(x)

model = Model(img_input, output)

-------------

model.summary()

-------------

from tensorflow.keras.optimizers import RMSprop

model.compile(loss='binary_crossentropy',
              optimizer=RMSprop(lr=0.001),
              metrics=['acc'])

-------------

train_datagen = ImageDataGenerator(rescale=1./255)
val_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        train_dir_1,  # This is the source directory for training images
        target_size=(150, 150),  # All images will be resized to 150x150
        batch_size=20,
        # Since we use binary_crossentropy loss, we need binary labels
        class_mode='binary')

validation_generator = val_datagen.flow_from_directory(
        validation_dir,
        target_size=(150, 150),
        batch_size=20,
        class_mode='binary')

-------------

history = model.fit_generator(
      train_generator,
      steps_per_epoch=100,
      epochs=15,
      validation_data=validation_generator,
      validation_steps=50,
      verbose=2)

-------------

acc = history.history['acc']
val_acc = history.history['val_acc']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc)
plt.plot(epochs, val_acc)
plt.title('Training and validation accuracy')

plt.figure()

plt.plot(epochs, loss)
plt.plot(epochs, val_loss)
plt.title('Training and validation loss')